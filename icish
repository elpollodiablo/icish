#!/usr/bin/env python

from fabric.api import env
import requests
import os.path
MAX_AUTH_ERRORS=3
sample_config = {'icinga_authkey':'dummyauthkey', 'icinga_uri': 'http://infra-icinga03.in.phoria.eu/icinga-web/web/api', 'icinga_auth': 'gssapi', 'use_domain':'in.phoria.eu'} #'basic'}

blubb="""
http://infra-icinga03.in.phoria.eu/icinga-web/web/api/service/

filter[
AND(HOST_CURRENT_STATE%7C=%7C0;OR(SERVICE_CURRENT_STATE%7C=%7C1;SERVICE_CURRENT_STATE%7C=%7C2))]
/columns(SERVICE_NAME%7CHOST_NAME%7CSERVICE_CURRENT_STATE%7CHOST_NAME%7CHOST_CURRENT_STATE%7CHOSTGROUP_NAME)/order(SERVICE_CURRENT_STATE;DESC)/countColumn=SERVICE_ID/json

http://infra-icinga03.in.phoria.eu/icinga-web/web/api/service/
filter[sAND(HOST_CURRENT_STATE|=|0;OR(SERVICE_CURRENT_STATE|=|1;SERVICE_CURRENT_STATE|=|2))]

/columns(SERVICE_NAME|HOST_NAME|SERVICE_CURRENT_STATE|HOST_NAME|HOST_CURRENT_STATE|HOSTGROUP_NAME)/order(SERVICE_CURRENT_STATE;DESC)/json
"""

def load_config(config_file = os.path.expanduser("~") + os.path.sep + ".icish.yml"):
	return sample_config

def _get_user_pass(config):
	if not config.has_key('icinga_user'):
		while True:
			config['icinga_user'] = raw_input("Username for %s: " % config['icinga_uri'])
			if config['icinga_user'] is not '': break
	if not config.has_key('icinga_password'):
		import getpass
		config['icinga_password'] = getpass.getpass()
	
def get_auth(config):
	assert config.has_key('icinga_auth')
	assert config['icinga_auth'] in ('gssapi', 'basic', 'digest')
	if config['icinga_auth'] == "gssapi":
		# print "Trying to authenticate with GSSAPI"
		from requests_kerberos import HTTPKerberosAuth
		return HTTPKerberosAuth()
	elif config['icinga_auth'] == 'basic':
		_get_user_pass(config)
		from requests.auth import HTTPBasicAuth
		return HTTPBasicAuth(config['icinga_user'], config['icinga_password'])
	elif config['icinga_auth'] == 'digest':
		from requests.auth import HTTPDigestAuth
		return HTTPDigestAuth(config['icinga_user'], config['icinga_password'])

def _get_host_list(config, filter=''):
	status_code = 499
	errors = 0
	while (status_code >= 400) and (status_code < 500) and (errors is not MAX_AUTH_ERRORS):
		auth = get_auth(config)
		cookies = {'icinga-web-loginname':'philip'}
		request_uri = config['icinga_uri'] + "/" + filter + "/columns[HOST_NAME]/authkey=dummyauthkey/json"
		headers = {'HTTP_REFERER': request_uri}
		#print request_uri
		r=requests.get(request_uri, auth=auth, cookies=cookies, headers=headers)
		status_code = r.status_code
		#print "status", status_code
		if status_code == 500:
			print "icinga didn't like our request %s and responded with %s" %(request_uri, status_code)
			import sys
			sys.exit(1)
		errors += 1
	if errors is MAX_AUTH_ERRORS: print "Too many authentication errors (%i)" % MAX_AUTH_ERRORS
	raw = r.json()
	assert raw.has_key("result")
	#import pprint
	#pprint.pprint(raw)
	result = list() 
	for e in raw['result']:
		if e['HOST_NAME'] not in result:
			result.append(e['HOST_NAME'])
	#print result
	return result

OPERATORS = [
	[" like ", "|LIKE|", lambda x: x],
	[" is ", "|=|", lambda x: x],
	[">", "|>|", lambda x: x],
	["<", "|<|", lambda x: x],
	[" not ", "|!=|", lambda x: x],
	[" contains ", "|LIKE|", lambda x: '*' + x + '*'],
	[" startswith ", "|LIKE|", lambda x: x + '*'],
	[" endswith ", "|LIKE|", lambda x: '*' + x],
]
LOGIC = [
	[" and ", " & ", "AND("],
	[" or ", " | ", "OR("]
]
VALUES = [
	[" true ", " 1 "],
	[" false ", " 0 "],
	[" ok ", " 0 "],
	[" green ", " 0 "],
	[" warning ", " 1 "],
	[" warn ", " 1 "],
	[" yellow ", " 1 "],
	[" orange ", " 1 "],
	[" critical ", " 2 "],
	[" crit ", " 2 "],
	[" failed ", " 2 "],
	[" fail ", " 2 "],
	[" red ", " 2 "],
]
KEYWORDS = [
	"SERVICE_NAME",
	"SERVICE_CURRENT_STATE",
	"SERVICE_ID",
	"SERVICE_IS_FLAPPING",
	"SERVICE_OBJECT_ID",
	"SERVICE_IS_ACTIVE",
	"SERVICE_IS_PENDING",
	"SERVICE_DISPLAY_NAME",
	"SERVICE_OUTPUT",
	"SERVICE_PERFDATA",
	"HOST_NAME",
	"HOST_CURRENT_STATE",
	"HOST_INSTANCE_ID",
	"HOST_DISPLAY_NAME",
	"HOST_ADDRESS",
	"HOST_IS_ACTIVE",
	"HOST_IS_PENDING",
	"HOST_ID",
	"HOST_OBJECT_ID",
	"HOST_ALIAS",
	"HOSTGROUP_NAME",
]

def _translate_to_rpn(s):
	s=s.replace(")", " ) ").replace("("," ( ")
#	for op in OPERATORS:
#		s=s.replace(op[0], op[1])
	
	for logic in LOGIC:
		s=s.replace(logic[0], logic[1])
	for val in VALUES:
		s=s.replace(val[0], val[1])
	#print s
	return _create_node_tree(s)	

def _assemble_icinga_filter(nt):
	result=""
	need_parens = False
	for n in nt:
		done = False
		if type(n) == type([]):
			result += _assemble_icinga_filter(n)
			continue
		for l in LOGIC:
			if n == l[1].strip():
				result += l[2]
				need_parens = True
				done = True
				continue

		for op in OPERATORS:
			if n.find(op[0]) > -1:
				a = [e.strip() for e in n.split(op[0])]
				k = a[0].upper()
				#print k
				if k not in KEYWORDS:
					print "expected %s to be a keyword, one of" % (a[0]), ", ".join([kw.lower() for kw in KEYWORDS])
				result += a[0] + op[1] + op[2](a[1]) + ";"
				done = True
		if not done:
			print "I expected %s to be someething, but it wasn't!" % n, nt
	if need_parens:
		result += ");"
	return result			

def _create_node_tree(s):
	my_child_nodes = []
	l = len(s)
	l_counter=0
	l_last=0
	nesting=0
	something_in_parens=False
	#print ">>>> called with ", s

	def icingafy_expression(u):
		return u.strip()

	while l_counter < l:
		if s[l_counter] in ["&", "|"]:
			#print "found op"
			if nesting == 0:
				if s[l_last:l_counter].strip() != "":
					my_child_nodes.append(icingafy_expression(s[l_last:l_counter]))
				# reverse to rpn
				if my_child_nodes[0] in ["&", "|"]:
					if s[l_counter] == my_child_nodes[0]:
						# the current expression already has the right operator
						pass
					else:
						# current expression has a different operator: wrap it and
						# prepend the new one
						my_child_nodes = [s[l_counter], my_child_nodes]
				else:
					# no operator in expression yet: prepend
					my_child_nodes.insert(0, s[l_counter])
				l_last = l_counter + 1
			if nesting > 0:
				something_in_parens = True
		if s[l_counter] is "(":
			if nesting == 0:
				if s[l_last:l_counter].strip() != "":
					my_child_nodes.append(icingafy_expression(s[l_last:l_counter]))
				l_last = l_counter + 1
			nesting += 1
		if s[l_counter] is ")":
			nesting -= 1
			if nesting == 0:
				if something_in_parens:
					something_in_parens = False
        	                	my_child_nodes.append(_create_node_tree(s[l_last:l_counter].strip()))
                        	l_last = l_counter + 1

		if l_counter ==  l - 1 and s[l_last:l_counter + 1].strip() != "":
			my_child_nodes.append(icingafy_expression(s[l_last:l_counter+1]))

		l_counter +=1
	return my_child_nodes


def tests():
	tests = {
		"all hosts in icinga":"service_name contains APT and (host_name contains prod or host_name contains dev) and service_current_state is fail",
		"foo":"service_name contains APT       and           (    host_name contains prod or    host_name contains dev     )and service_status is   fail",
		"bar":"service_name contains APT and (host_name contains prod or host_name contains dev or (host_name contains test or host_name contains pre) ) and service_status is fail",
		"blah":"(foo is b and bar is bluh) or service_name contains APT and (host_name contains prod or host_name contains dev or (host_name contains test or host_name contains pre) ) and service_status is fail"
	}

	for test in tests:
		print "=========================================================================================================================="
		print test
		print _translate_to_rpn(test)
		print

def get_host_list_by_service_filter(config, entity, filter_text):
	filter
	return _get_host_list(config, filter)


if __name__ == "__main__":
	config = load_config()
	import sys
	if sys.argv[1] in ["host", "service"]:
		rpn = _translate_to_rpn(sys.argv[2])
		filter = "%s/filter[AND(%s)]" % (sys.argv[1], _assemble_icinga_filter(rpn))
		for host in _get_host_list(config, filter):
			print host + "." + config["use_domain"]
	else:
		print "blubb?"
